// Dependencies
// @see https://docs.gradle.org/current/javadoc/org/gradle/api/artifacts/dsl/DependencyHandler.html

ext {
  // define library's versions
  versions = [
    logback: '1.1.+',
    guava: '20.+',
    gson: '2.+',
    jackson: '2.+',
    thrift: '0.10.0',

    okio: '1.+',
    okhttp: '3.+',
    netty: '4.1.6.Final',
    spring: '4.3.5.RELEASE',

    druid: '1.0.16',
    mybatis: '3.4.1',
    mybatis_spring: '1.3.0',
    mysql_connector: '5.1.37',

    jedis: '2.+',
    spring_redis: '1.7.6.RELEASE',
    ga: '1.1.2',

    mongodb: '3.4.0',
    hibernateValidator: '5.+',
    validation:'1.+',
    spring_session: '1.2.1.RELEASE',
    javax_el:'3.0.0',
    spring_security:'4.2.3.RELEASE',
    kafka: '0.10.2.0',
    slf4j:'1.+',
  ]

  // define test library's versions
  test_versions = [
    junit: '4.+',
    powermock: '1.6.4',
    mockito: '1.10.19',
  ]

  // define gradle plugins' versions
  plugin_versions = [
    shadow: '1.2.4',
  ]

  // define libraries that needed in compile time
  libraries = [
    javax_inject: 'javax.inject:javax.inject:1',
    javax_servlet: 'javax.servlet:javax.servlet-api:3.0.1',
    logback: "ch.qos.logback:logback-classic:${versions.logback}",
    guava: "com.google.guava:guava:${versions.guava}",
    gson: "com.google.code.gson:gson:${versions.gson}",
    jackson_core: "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
    jackson_databind: "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
    jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
    geoip: "com.maxmind.geoip2:geoip2:2.6.0",
    thrift: "org.apache.thrift:libthrift:${versions.thrift}",
    common_pool: "org.apache.commons:commons-pool2:2.2",
    common_lang3: "org.apache.commons:commons-lang3:3.+",

    okio: "com.squareup.okio:okio:${versions.okio}",
    okhttp: "com.squareup.okhttp3:okhttp:${versions.okhttp}",
    netty: "io.netty:netty-all:${versions.netty}",

    spring_core: "org.springframework:spring-core:${versions.spring}",
    spring_context: "org.springframework:spring-context:${versions.spring}",
    spring_beans: "org.springframework:spring-beans:${versions.spring}",
    spring_webmvc: "org.springframework:spring-webmvc:${versions.spring}",
    spring_test: "org.springframework:spring-test:${versions.spring}",
    spring_expression: "org.springframework:spring-expression:${versions.spring}",
    spring_session: "org.springframework:spring-session:${versions.spring_session}",

    druid: "com.alibaba:druid:${versions.druid}",
    spring_jdbc: "org.springframework:spring-jdbc:${versions.spring}",
    mysql_connector: "mysql:mysql-connector-java:${versions.mysql_connector}",
    mybatis: "org.mybatis:mybatis:${versions.mybatis}",
    mybatis_spring: "org.mybatis:mybatis-spring:${versions.mybatis_spring}",

    spring_redis: "org.springframework.data:spring-data-redis:${versions.spring_redis}",
    jedis: "redis.clients:jedis:${versions.jedis}",
    ga: "com.brsanthu:google-analytics-java:${versions.ga}",

    mongodb: "org.mongodb:mongo-java-driver:${versions.mongodb}",
    hibernateValidator: "org.hibernate:hibernate-validator:${versions.hibernateValidator}",
    validation: "javax.validation:validation-api:${versions.validation}",
    spring_data_dynamodb: "com.github.derjust:spring-data-dynamodb:${versions.spring_data_dynamodb}",
    javax_el:"javax.el:javax.el-api:${versions.javax_el}",
    spring_security:"org.springframework.security:spring-security-web:${versions.spring_security}",
    kafka_client: "org.apache.kafka:kafka-clients:${versions.kafka}",
    kafka_connect: "org.apache.kafka:connect-runtime:${versions.kafka}",
    slf4j:"org.slf4j:slf4j-api:${versions.slf4j}",
  ]

  // define test libraries that needed in test compile time
  test_libraries = [
    junit: "junit:junit:${test_versions.junit}",
    mockito: "org.mockito:mockito-all:${test_versions.mockito}",
    powermock_junit4: "org.powermock:powermock-module-junit4:${test_versions.powermock}",
    powermock_api_mockito: "org.powermock:powermock-api-mockito:${test_versions.powermock}",
    spring_test: "org.springframework:spring-test:${versions.spring}",
  ]

  // define gradle plugins that needed for build script
  gradle_plugins = [
    shadow: "com.github.jengelman.gradle.plugins:shadow:${plugin_versions.shadow}",
  ]
}
